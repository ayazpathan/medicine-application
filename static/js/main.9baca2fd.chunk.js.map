{"version":3,"sources":["redux/medicine/medicine.types.js","redux/medicine/medicine.utils.js","redux/medicine/medicine.reducer.js","redux/root-reducer.js","redux/store.js","components/header/header.js","components/model/model.jsx","components/form/form.jsx","components/remove-item-warning/remove-item-warning.jsx","components/medicine-list/medicine-list.component.jsx","redux/medicine/medicine.actions.js","pages/home/home.jsx","App.js","serviceWorker.js","index.js"],"names":["MedicineActionTypes","ADD_ITEM","REMOVE_ITEM","UPDATE_ITEM","addItemToCart","medicineItems","medicineItemToAdd","ID","id","updateMedicineItem","medicineItemToUpdate","map","medicineItem","name","type","qty","removeItemFromMedicine","medicineItemToRemove","filter","INITIAL_STATE","autoIcrementID","medicineReducer","state","action","payload","persistConfig","key","storage","whitelist","rootReducer","combineReducers","medicine","persistReducer","store","createStore","persistor","persistStore","Header","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","Model","closeModel","title","children","Modal","show","backdrop","onHide","keyboard","closeButton","Title","Body","MedicineForm","formState","MedicineFormHandler","operationType","useState","isError","setIsError","medicineDetails","setMedicineDetails","handleChange","event","target","value","Form","Group","controlId","Label","Control","placeholder","onChange","as","defaultValue","Button","variant","onClick","Alert","RemoveItemWarning","confirmDelete","itemName","connect","dispatch","removeItem","item","onEdit","isModelOpen","setIsModelOpen","selectedItem","setSelectedItem","length","Table","striped","bordered","hover","addItem","updateItem","modelTitle","setModelTitle","operation","setOperation","updateItemValue","setUpdateItemValue","openModel","Container","Row","style","marginTop","App","exact","path","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9baca2fd.chunk.js","sourcesContent":["const MedicineActionTypes = {\r\n  ADD_ITEM: \"ADD_MEDICINE\",\r\n  REMOVE_ITEM: \"REMOVE_ITEM\",\r\n  UPDATE_ITEM: \"UPDATE_ITEM\",\r\n};\r\n\r\nexport default MedicineActionTypes;\r\n","export const addItemToCart = (medicineItems, medicineItemToAdd, ID) => {\r\n  return [...medicineItems, { ...medicineItemToAdd, id: ID + 1 }];\r\n};\r\n\r\nexport const updateMedicineItem = (medicineItems, medicineItemToUpdate) => {\r\n  let allUpdatedMedicineItems = medicineItems.map((medicineItem) =>\r\n    medicineItem.id === medicineItemToUpdate.id\r\n      ? {\r\n          ...medicineItem,\r\n          name: medicineItemToUpdate.name,\r\n          type: medicineItemToUpdate.type,\r\n          qty: medicineItemToUpdate.qty,\r\n        }\r\n      : medicineItem\r\n  );\r\n\r\n  return allUpdatedMedicineItems;\r\n};\r\n\r\nexport const removeItemFromMedicine = (medicineItems, medicineItemToRemove) => {\r\n  return medicineItems.filter(\r\n    (medicineItem) => medicineItem.id !== medicineItemToRemove.id\r\n  );\r\n};\r\n","import MedicineActionTypes from \"./medicine.types\";\r\nimport {\r\n  addItemToCart,\r\n  removeItemFromMedicine,\r\n  updateMedicineItem,\r\n} from \"./medicine.utils\";\r\n\r\nconst INITIAL_STATE = {\r\n  autoIcrementID: 0,\r\n  medicineItems: [],\r\n};\r\n\r\nconst medicineReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case MedicineActionTypes.ADD_ITEM:\r\n      return {\r\n        ...state,\r\n        autoIcrementID: state.autoIcrementID + 1,\r\n        medicineItems: addItemToCart(\r\n          state.medicineItems,\r\n          action.payload,\r\n          state.autoIcrementID\r\n        ),\r\n      };\r\n    case MedicineActionTypes.UPDATE_ITEM:\r\n      return {\r\n        ...state,\r\n        medicineItems: updateMedicineItem(state.medicineItems, action.payload),\r\n      };\r\n    case MedicineActionTypes.REMOVE_ITEM:\r\n      return {\r\n        ...state,\r\n        medicineItems: removeItemFromMedicine(\r\n          state.medicineItems,\r\n          action.payload\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default medicineReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport medicineReducer from \"./medicine/medicine.reducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  whitelist: [\"medicine\"],\r\n};\r\n\r\nconst rootReducer = combineReducers({ medicine: medicineReducer });\r\n\r\nexport default persistReducer(persistConfig, rootReducer);\r\n","import { createStore } from \"redux\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nexport const store = createStore(rootReducer);\r\nexport const persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#home\">Medicare</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"/\">Home</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Model = ({ closeModel, title, children }) => {\r\n  return (\r\n    <Modal show={true} backdrop=\"static\" onHide={closeModel} keyboard={false}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nModel.propTypes = {\r\n  closeModel: PropTypes.func.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Model;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Form, Alert } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./form.css\";\r\n\r\nconst MedicineForm = ({\r\n  MedicineFormHandler,\r\n  closeModel,\r\n  operationType,\r\n  medicineItem,\r\n}) => {\r\n  var formState;\r\n\r\n  if (operationType === \"ADD_ITEM\") {\r\n    formState = {\r\n      name: \"\",\r\n      type: \"Select Medicine Type\",\r\n      qty: 0,\r\n    };\r\n  } else {\r\n    formState = {\r\n      id: medicineItem.id,\r\n      name: medicineItem.name,\r\n      type: medicineItem.type,\r\n      qty: medicineItem.qty,\r\n    };\r\n  }\r\n\r\n  const [isError, setIsError] = useState(false);\r\n  const [medicineDetails, setMedicineDetails] = useState(formState);\r\n\r\n  const handleChange = (event) => {\r\n    const { value, name } = event.target;\r\n    setMedicineDetails({ ...medicineDetails, [name]: value });\r\n  };\r\n\r\n  const submitMedicineHandler = () => {\r\n    if (\r\n      medicineDetails.name !== \"\" &&\r\n      medicineDetails.type !== \"Select Medicine Type\" &&\r\n      medicineDetails.qty !== 0\r\n    ) {\r\n      setIsError(false);\r\n      MedicineFormHandler(medicineDetails);\r\n      closeModel();\r\n    } else {\r\n      setIsError(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form className=\"container\">\r\n      <Form.Group controlId=\"formName\">\r\n        <Form.Label>Email address</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Enter name\"\r\n          value={medicineDetails.name}\r\n          onChange={handleChange}\r\n          name=\"name\"\r\n        />\r\n      </Form.Group>\r\n      <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n        <Form.Label>Medicine Type</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          defaultValue={medicineDetails.type}\r\n          onChange={handleChange}\r\n          name=\"type\"\r\n        >\r\n          <option>Select Medicine Type</option>\r\n          <option>Capsule</option>\r\n          <option>Syrup</option>\r\n          <option>Cream</option>\r\n        </Form.Control>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"formQty\">\r\n        <Form.Label>Quantity</Form.Label>\r\n        <Form.Control\r\n          name=\"qty\"\r\n          type=\"number\"\r\n          placeholder=\"Quantity\"\r\n          value={medicineDetails.qty}\r\n          onChange={handleChange}\r\n        />\r\n      </Form.Group>\r\n      <Button\r\n        variant=\"primary\"\r\n        onClick={() => {\r\n          submitMedicineHandler();\r\n        }}\r\n      >\r\n        Save Changes\r\n      </Button>\r\n      <br />\r\n      {isError === true ? (\r\n        <Alert variant=\"danger\">Please enter all details</Alert>\r\n      ) : null}\r\n    </Form>\r\n  );\r\n};\r\n\r\nMedicineForm.propTypes = {\r\n  MedicineFormHandler: PropTypes.func.isRequired,\r\n  closeModel: PropTypes.func.isRequired,\r\n  operationType: PropTypes.func.isRequired,\r\n  medicineItem: PropTypes.object,\r\n};\r\n\r\nexport default MedicineForm;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./fdmove-warning.css\";\r\n\r\nconst RemoveItemWarning = ({ closeModel, confirmDelete, itemName }) => {\r\n  return (\r\n    <div>\r\n      <h6>\r\n        Are you sure you want to delete <b>{itemName}</b>?\r\n      </h6>\r\n      <br />\r\n      <div className=\"button-container\">\r\n        <Button variant=\"secondary\" onClick={closeModel}>\r\n          No\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={confirmDelete}>\r\n          Yes\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nRemoveItemWarning.propTypes = {\r\n  closeModel: PropTypes.func.isRequired,\r\n  confirmDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default RemoveItemWarning;\r\n","import React, { useState } from \"react\";\r\nimport { Table, thead, tbody, tr, td, th, Button } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeItem } from \"../../redux/medicine/medicine.actions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Model from \"../../components/model/model\";\r\nimport RemoveItemWarning from \"../remove-item-warning/remove-item-warning\";\r\n\r\nconst MedicineList = ({ medicineItems, removeItem, onEdit }) => {\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const [selectedItem, setSelectedItem] = useState({});\r\n\r\n  const closeModel = () => {\r\n    setIsModelOpen(false);\r\n    setSelectedItem({});\r\n  };\r\n\r\n  const confirmDelete = () => {\r\n    removeItem(selectedItem);\r\n    setIsModelOpen(false);\r\n  };\r\n\r\n  const renderModel = () => {\r\n    return isModelOpen === true ? (\r\n      <Model title=\"Medicine Delete\" closeModel={closeModel}>\r\n        <RemoveItemWarning\r\n          closeModel={closeModel}\r\n          confirmDelete={confirmDelete}\r\n          itemName={selectedItem.name}\r\n        />\r\n      </Model>\r\n    ) : null;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {medicineItems.length > 0 ? (\r\n        <Table striped bordered hover>\r\n          {renderModel()}\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Medicine Name</th>\r\n              <th>Medicine Type</th>\r\n              <th>Quantity</th>\r\n              <th>Update Medicine</th>\r\n              <th>Remove Medicine</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {medicineItems.map((medicineItem) => (\r\n              <tr key={medicineItem.id}>\r\n                <td>{medicineItem.id}</td>\r\n                <td>{medicineItem.name}</td>\r\n                <td>{medicineItem.type}</td>\r\n                <td>{medicineItem.qty}</td>\r\n                <td>\r\n                  <Button\r\n                    variant=\"success\"\r\n                    onClick={() => {\r\n                      onEdit(medicineItem);\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                </td>\r\n                <td>\r\n                  <Button\r\n                    variant=\"danger\"\r\n                    onClick={() => {\r\n                      setSelectedItem(medicineItem);\r\n                      setIsModelOpen(true);\r\n                    }}\r\n                  >\r\n                    Remove\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      ) : (\r\n        <h5>There is no medicine available at the moment!</h5>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  removeItem: (item) => dispatch(removeItem(item)),\r\n});\r\n\r\nconst mapStateToProps = ({ medicine: { medicineItems } }) => ({\r\n  medicineItems,\r\n});\r\n\r\nMedicineList.propTypes = {\r\n  medicineItems: PropTypes.array.isRequired,\r\n  removeItem: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MedicineList);\r\n","import MedicineActionTypes from \"./medicine.types\";\r\n\r\nexport const addItem = (item) => ({\r\n  type: MedicineActionTypes.ADD_ITEM,\r\n  payload: item,\r\n});\r\n\r\nexport const updateItem = (item) => ({\r\n  type: MedicineActionTypes.UPDATE_ITEM,\r\n  payload: item,\r\n});\r\n\r\nexport const removeItem = (item) => ({\r\n  type: MedicineActionTypes.REMOVE_ITEM,\r\n  payload: item,\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { Container, Row, Button } from \"react-bootstrap\";\r\nimport Model from \"../../components/model/model\";\r\nimport MedicineForm from \"../../components/form/form\";\r\nimport MedicineList from \"../../components/medicine-list/medicine-list.component\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { addItem, updateItem } from \"../../redux/medicine/medicine.actions\";\r\n\r\nconst Home = ({ addItem, updateItem }) => {\r\n  const [isModelOpen, setIsModelOpen] = useState(false);\r\n  const [modelTitle, setModelTitle] = useState(\"Add New Medicine\");\r\n  const [operation, setOperation] = useState(\"ADD_ITEM\");\r\n  const [updateItemValue, setUpdateItemValue] = useState({});\r\n\r\n  const addNewMedicineHandler = () => {\r\n    setModelTitle(\"Add New Medicine\");\r\n    setOperation(\"ADD_ITEM\");\r\n    setUpdateItemValue({});\r\n    openModel();\r\n  };\r\n\r\n  const openModel = () => {\r\n    setIsModelOpen(true);\r\n  };\r\n\r\n  const closeModel = () => {\r\n    setIsModelOpen(false);\r\n  };\r\n\r\n  const updateMedicineHandler = (item) => {\r\n    setModelTitle(\"Update Medicine\");\r\n    setOperation(\"UPDATE_ITEM\");\r\n    setUpdateItemValue(item);\r\n    setIsModelOpen(true);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {isModelOpen === true ? (\r\n        <Model closeModel={closeModel} title={modelTitle}>\r\n          <MedicineForm\r\n            MedicineFormHandler={\r\n              operation === \"ADD_ITEM\" ? addItem : updateItem\r\n            }\r\n            closeModel={closeModel}\r\n            operationType={operation}\r\n            medicineItem={updateItemValue}\r\n          />\r\n        </Model>\r\n      ) : null}\r\n      <Row className=\"justify-content-md-center\">\r\n        <div style={{ marginTop: \"50px\" }}>\r\n          <Button variant=\"outline-primary\" onClick={addNewMedicineHandler}>\r\n            Add Medicine\r\n          </Button>\r\n        </div>\r\n      </Row>\r\n      <Row className=\"justify-content-md-center\">\r\n        <div style={{ marginTop: \"50px\" }}>\r\n          <MedicineList onEdit={updateMedicineHandler} />\r\n        </div>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addItem: (item) => dispatch(addItem(item)),\r\n  updateItem: (item) => dispatch(updateItem(item)),\r\n});\r\n\r\nHome.propTypes = {\r\n  addItem: PropTypes.func.isRequired,\r\n  updateItem: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Home);\r\n","import React from \"react\";\r\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { store, persistor } from \"./redux/store\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Header from \"../src/components/header/header\";\r\nimport Home from \"../src/pages/home/home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <PersistGate persistor={persistor}>\r\n        <Header />\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </PersistGate>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}